#!/usr/bin/python

#import libreries
import psutil
import datetime
import time
import schedule
import json
import configparser, os.path, re

#set global variables
config = configparser.ConfigParser()
config.read('setting.ini')
output_type = config.get('common', 'output')
interval = config.get('common', 'interval')
ss=0
a=psutil.Process()

#function, which displays info to the json file.
def log():
    global ss
    ss += 1
    ts = time.time()
    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
    snapshot = {
        'CPU load': psutil.cpu_percent(interval=1, percpu=True),
        'memory usage': a.memory_percent()*100,
        'virtual memory usage': psutil.virtual_memory(),
        'IO information': [psutil.disk_io_counters()[2],psutil.disk_io_counters()[3]],
        'Network information': psutil.net_if_addrs()
    }
    data = ['SNAPSHOT' + str(ss) + ": " + str(st) + ": ", snapshot]
    with open("test.json", "a") as f:
        json.dump(data, f, indent=3, sort_keys=True)

#function, which displays info to the txt file.
def log2():
    global ss
    ss += 1
    ts = time.time()
    st = datetime.datetime.fromtimestamp(ts).strftime('%Y-%m-%d %H:%M:%S')
    f = open("test.txt", "a")
    f.write('\n' + 'SNAPSHOT ' + str(ss) + ':')
    f.write('\n' + st)
    f.write('\n' + str(psutil.cpu_percent(interval=1, percpu=True)))
    f.write('\n' + str(a.memory_percent() * 100))
    f.write('\n' + str(psutil.virtual_memory()))
    f.write('\n' + str(psutil.disk_io_counters()))
    f.write('\n' + str(psutil.net_if_addrs()))
    f.close()

#check variables in setting.ini and choose wich function will be run.
if output_type == "json":
    schedule.every(int(interval)).minutes.do(log)
    #check existing file and number of last snapshot
    if os.path.isfile("test.json") == True:
        fl = open("test.json", "r").read()
        ss = int(re.compile(r'SNAPSHOT(\d+)').findall(fl)[-1])
    else:
        ss = 0
elif output_type == "txt":
    schedule.every(int(interval)).minutes.do(log2)
    # check existing file and number of last snapshot
    if os.path.isfile("test.txt") == True:
        fl = open("test.txt", "r").read()
        ss = int(re.compile(r'SNAPSHOT (\d+)').findall(fl)[-1])
    else:
        ss = 0
else:
    print("Chose correct type of output")
    quit()

while True:
    schedule.run_pending()

