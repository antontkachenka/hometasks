#!/usr/bin/python


# import libraries
import psutil
import datetime
import schedule
import json
import configparser
import os.path
import re


# set global variables
config = configparser.ConfigParser()
config.read('setting.ini')
output_type = config.get('common', 'output')
interval = config.get('common', 'interval')


class Parent:
    def __init__(self):
        self.ss = 0
        self.st = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        self.cpuload = psutil.cpu_percent(interval=1, percpu=True)
        self.memusage = psutil.Process().memory_percent()*100
        self.virmemusage = psutil.virtual_memory()
        self.ioinf = [psutil.disk_io_counters()[2],
                      psutil.disk_io_counters()[3]]
        self.netinfo = psutil.net_if_addrs()


class Totxt(Parent):
    def log2(self):
        if os.path.isfile("test.txt") is True:
            fl = open("test.txt", "r").read()
            self.ss = int(re.compile(r'SNAPSHOT (\d+)').findall(fl)[-1])
        else:
            self.ss = 0
        self.ss += 1
        f = open("test.txt", "a")
        f.write('\n' + 'SNAPSHOT ' + str(self.ss) + ':')
        f.write('\n' + self.st)
        f.write('\n' + str(self.cpuload))
        f.write('\n' + str(self.memusage))
        f.write('\n' + str(self.virmemusage))
        f.write('\n' + str(self.ioinf))
        f.write('\n' + str(self.netinfo))
        f.close()


class Tojson(Parent):
    def log(self):
        if os.path.isfile("test.json") is True:
            fl = open("test.json", "r").read()
            self.ss = int(re.compile(r'SNAPSHOT(\d+)').findall(fl)[-1])
        else:
            self.ss = 0
        self.ss += 1
        snapshot = {
            'CPU load': self.cpuload,
            'memory usage': self.memusage,
            'virtual memory usage': self.virmemusage,
            'IO information': self.ioinf,
            'Network information': self.netinfo
        }
        data = ['SNAPSHOT' + str(self.ss) + ": " + str(self.st) + ": ",
                snapshot]
        with open("test.json", "a") as f:
            json.dump(data, f, indent=3, sort_keys=True)
            f.close()


def write():
    if output_type == "json":
        # check existing file and number of last snapshot
        test_obj = Tojson()
        test_obj.log()
    elif output_type == "txt":
        # check existing file and number of last snapshot
        test_obj = Totxt()
        test_obj.log2()
    else:
        print("Chose correct type of output")
        quit()


schedule.every(int(interval)).seconds.do(write)
while True:
    schedule.run_pending()
